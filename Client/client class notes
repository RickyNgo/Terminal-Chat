Client class

Notes: All private members and private functions end with an underscore. Some of these members/functions will need to be replaced with other class objects (refer to inline notes). The reading/writing functions will need to be set up by using the Message and ChatLog classes for reference.

Going to need a helper function file and another class for chat rooms on the client side

Need to add input checking functions (check if trying to delete nonexistant room etc)

Need to add functions for getting info from server (friend list, chat rooms, etc)


private members:
	boost::asio::io_service& io_service_;
	tcp::socket main_socket_;
	chat_message read_msg_; //	CHANGE TO RICKY'S CLASS NAME
	chat_message_queue write_msgs_; // "

	These first four are straight from the chat_client example on the boost website (http://www.boost.org/doc/libs/1_65_1/doc/html/boost_asio/example/cpp11/chat/chat_client.cpp). read_msg_ and write_msgs_ may be scrapped/edited as needed when integrated with other classes. According to Stack Overflow, we can use one io_service for multiple sockets.

	The Client will have multiple sockets associated with it, but main_socket_ will the one through which its non-room-specific commands will be sent, such as /join, /online, and /exit. This socket must persist through the whole session whereas room sockets may be opened and closed without affecting the user's online status.

	std::string user_alias_;
	int user_id_;
	std::map<int,std::string> friend_list_;
	std::vector<std::string> room_list_; // replace with vector of ChatRooms
	std::map<int,tcp::socket> room_sockets_; // replace this with vector of ChatRooms 

	Users are identified by their name (user_alias_) and a unique id (user_id_). Server will need a master list of these to cross reference when users log in or try to create an account. Passwords are not stored in the Client class. They are held by and must be accessed through the server. As of right now, I don't see a need for the Client to hold an account password.

	The friend list will be held in an associative container of mapped user id/user alias pairs representing each friend. Friends could possibly be moved into their own mini Class with some basic members and getters/setters if we don't feel like messing with associative containers.

	room_list_ is just a vector containing the names of the chat rooms this user is connected to and is intended just for printing the list to the user (but could also hold the room id if needed). room_sockets_ holds mapped ChatRoom id/socket pairs for those rooms. room_sockets_ may need to be changed in order to better reflect how Clients are identifying their various connections. A Client will switch between chats by searching their map for a specific key (room id) and sending/receiving messages through the socket it finds at that key.

private:
	void do_connect_();
	void do_read_header_();
	void do_read_body_();
	void do_write_();
	
	These are straight from the boost example (same link as above).

public:
	Class(boost::asio::io_service& io_service, tcp::resolver::iterator endpoint_iterator);

	void write();
	void close();
	From boost example.

	std::string show_help();
	
	Returns generic list of commands/help

	std::string get_user_alias(int);
	int get_user_id();
	std::vector<std::string> get_friend_list();
	std::vector<std::string> get_room_list(); 
	std::map<int,tcp::socket> get_room_sockets();

	Generic getters. 

	void set_user_alias(std::string);	
	void set_user_id(int);
	void add_friend(int);
	void add_room(std::string); 
	void add_room_socket(int, tcp::socket); 

	Generic setters. 
